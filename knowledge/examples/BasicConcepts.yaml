- content: |
    class ManimCELogo(Scene):
        def construct(self):
            self.camera.background_color = "#ece6e2"
            logo_green = "#87c2a5"
            logo_blue = "#525893"
            logo_red = "#e07a5f"
            logo_black = "#343434"
            ds_m = MathTex(r"\mathbb{M}", fill_color=logo_black).scale(7)
            ds_m.shift(2.25 * LEFT + 1.5 * UP)
            circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)
            square = Square(color=logo_blue, fill_opacity=1).shift(UP)
            triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)
            logo = VGroup(triangle, square, circle, ds_m)  # order matters
            logo.move_to(ORIGIN)
            self.add(logo)
  name: ManimCELogo
  description: |
    这段代码使用 Manim 库绘制了一个包含不同几何图形和数学符号的标志。具体来说，它创建了一个包含以下元素的图像：
    1. **背景颜色**设置为浅灰色（#ece6e2）。
    2. **一个巨大的黑色字母 "M"**，使用了数学字体，并缩放到7倍大小。
    3. **一个绿色的圆形**，位于左侧。
    4. **一个蓝色的正方形**，位于上方。
    5. **一个红色的三角形**，位于右侧。
    6. 这些元素被组合成一个整体，居中显示在屏幕上。
    这个标志组合了几何形状和数学符号，展示了 Manim 的图形能力。
- name: BraceAnnotation
  content: |
    class BraceAnnotation(Scene):
        def construct(self):
            dot = Dot([-2, -1, 0])
            dot2 = Dot([2, 1, 0])
            line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)
            b1 = Brace(line)
            b1text = b1.get_text("Horizontal distance")
            b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())
            b2text = b2.get_tex("x-x_1")
            self.add(line, dot, dot2, b1, b2, b1text, b2text)
  description: |
    这段代码使用 Manim 库创建了一个包含两个点、连接这两个点的线段以及一些注释的动画场景。具体来说，它绘制了以下内容：
    1. **两个点**，分别位于坐标 \([-2, -1, 0]\) 和 \([2, 1, 0]\)。
    2. **一条橙色的线段**，连接这两个点。
    3. **一个水平的 Brace**（大括号）位于线段下方，并附有文字“Horizontal distance”。
    4. **一个垂直的 Brace**，与线段垂直，并附有 LaTeX 公式 \(x - x_1\)。
    这个场景展示了如何在 Manim 中使用 Brace（大括号）来注释线段的距离和其他信息。
- name: VectorArrow
  content: |
    class VectorArrow(Scene):
        def construct(self):
            dot = Dot(ORIGIN)
            arrow = Arrow(ORIGIN, [2, 2, 0], buff=0)
            numberplane = NumberPlane()
            origin_text = Text('(0, 0)').next_to(dot, DOWN)
            tip_text = Text('(2, 2)').next_to(arrow.get_end(), RIGHT)
            self.add(numberplane, dot, arrow, origin_text, tip_text)
  description: |
    这段代码使用 Manim 库创建了一个带有坐标轴、点、箭头和文本标签的动画场景。具体来说，它绘制了以下内容：
    1. **一个点**，位于原点 \((0, 0)\)。
    2. **一个箭头**，从原点指向坐标 \((2, 2)\)。
    3. **一个坐标平面**，显示二维坐标系。
    4. **原点的文本标签** “(0, 0)”，位于点的下方。
    5. **箭头尖端的文本标签** “(2, 2)”，位于箭头终点的右侧。
    这个场景展示了如何在 Manim 中绘制箭头并添加坐标标签。
- name: GradientImageFromArray
  content: |
    class GradientImageFromArray(Scene):
        def construct(self):
            n = 256
            imageArray = np.uint8(
                [[i * 256 / n for i in range(0, n)] for _ in range(0, n)]
            )
            image = ImageMobject(imageArray).scale(2)
            image.background_rectangle = SurroundingRectangle(image, GREEN)
            self.add(image, image.background_rectangle)
  description: |
    这段代码使用 Manim 库创建了一个显示渐变图像的动画场景。具体来说，它绘制了以下内容：
    1. **创建一个 256x256 的图像数组**，每个像素的值从左到右逐渐增加，形成水平渐变效果。
    2. **将图像数组转换为图像对象**，并将图像缩放到原来的两倍大小。
    3. **在图像周围绘制一个绿色的矩形边框**，突出显示图像。
    4. **将图像和矩形边框添加到场景中**。
    这个场景展示了如何在 Manim 中从数组创建图像并添加边框。
- name: BooleanOperations
  content: |
    class BooleanOperations(Scene):
        def construct(self):
            ellipse1 = Ellipse(
                width=4.0, height=5.0, fill_opacity=0.5, color=BLUE, stroke_width=10
            ).move_to(LEFT)
            ellipse2 = ellipse1.copy().set_color(color=RED).move_to(RIGHT)
            bool_ops_text = MarkupText("<u>Boolean Operation</u>").next_to(ellipse1, UP * 3)
            ellipse_group = Group(bool_ops_text, ellipse1, ellipse2).move_to(LEFT * 3)
            self.play(FadeIn(ellipse_group))

            i = Intersection(ellipse1, ellipse2, color=GREEN, fill_opacity=0.5)
            self.play(i.animate.scale(0.25).move_to(RIGHT * 5 + UP * 2.5))
            intersection_text = Text("Intersection", font_size=23).next_to(i, UP)
            self.play(FadeIn(intersection_text))

            u = Union(ellipse1, ellipse2, color=ORANGE, fill_opacity=0.5)
            union_text = Text("Union", font_size=23)
            self.play(u.animate.scale(0.3).next_to(i, DOWN, buff=union_text.height * 3))
            union_text.next_to(u, UP)
            self.play(FadeIn(union_text))

            e = Exclusion(ellipse1, ellipse2, color=YELLOW, fill_opacity=0.5)
            exclusion_text = Text("Exclusion", font_size=23)
            self.play(e.animate.scale(0.3).next_to(u, DOWN, buff=exclusion_text.height * 3.5))
            exclusion_text.next_to(e, UP)
            self.play(FadeIn(exclusion_text))

            d = Difference(ellipse1, ellipse2, color=PINK, fill_opacity=0.5)
            difference_text = Text("Difference", font_size=23)
            self.play(d.animate.scale(0.3).next_to(u, LEFT, buff=difference_text.height * 3.5))
            difference_text.next_to(d, UP)
            self.play(FadeIn(difference_text))
  description: |
    这段代码使用 Manim 库创建了一个展示布尔运算的动画场景。具体来说，它绘制了以下内容：
    1. **两个椭圆**，一个蓝色一个红色，分别位于左侧和右侧。
    2. **一个标题**“Boolean Operation”位于左侧椭圆的上方。
    3. **椭圆组**包含标题和两个椭圆，并整体向左移动。
    然后依次展示以下布尔运算效果：
    1. **交集 (Intersection)**：
      - 创建一个绿色的交集区域，并缩放移动到右上方。
      - 在交集区域的上方添加“Intersection”标签。
    2. **并集 (Union)**：
      - 创建一个橙色的并集区域，并缩放移动到交集区域的下方。
      - 在并集区域的上方添加“Union”标签。
    3. **排斥 (Exclusion)**：
      - 创建一个黄色的排斥区域，并缩放移动到并集区域的下方。
      - 在排斥区域的上方添加“Exclusion”标签。
    4. **差集 (Difference)**：
      - 创建一个粉色的差集区域，并缩放移动到并集区域的左侧。
      - 在差集区域的上方添加“Difference”标签。
    这个场景展示了如何在 Manim 中进行布尔运算，并通过动画效果展示这些运算的结果。