- name: OpeningManim
  content: |
    class OpeningManim(Scene):
        def construct(self):
            title = Tex(r"This is some \LaTeX")
            basel = MathTex(r"\sum_{n=1}^\infty \frac{1}{n^2} = \frac{\pi^2}{6}")
            VGroup(title, basel).arrange(DOWN)
            self.play(
                Write(title),
                FadeIn(basel, shift=DOWN),
            )
            self.wait()

            transform_title = Tex("That was a transform")
            transform_title.to_corner(UP + LEFT)
            self.play(
                Transform(title, transform_title),
                LaggedStart(*[FadeOut(obj, shift=DOWN) for obj in basel]),
            )
            self.wait()

            grid = NumberPlane()
            grid_title = Tex("This is a grid", font_size=72)
            grid_title.move_to(transform_title)

            self.add(grid, grid_title)  # Make sure title is on top of grid
            self.play(
                FadeOut(title),
                FadeIn(grid_title, shift=UP),
                Create(grid, run_time=3, lag_ratio=0.1),
            )
            self.wait()

            grid_transform_title = Tex(
                r"That was a non-linear function \\ applied to the grid"
            )
            grid_transform_title.move_to(grid_title, UL)
            grid.prepare_for_nonlinear_transform()
            self.play(
                grid.animate.apply_function(
                    lambda p: p
                              + np.array(
                        [
                            np.sin(p[1]),
                            np.sin(p[0]),
                            0,
                        ]
                    )
                ),
                run_time=3,
            )
            self.wait()
            self.play(Transform(grid_title, grid_transform_title))
            self.wait()
  description: |
    这段代码使用 Manim 库创建了一个展示 LaTeX 数学表达式、文本转换和非线性变换的动画场景：

    1. **显示 LaTeX 标题和公式**：
      - 标题为 "This is some \LaTeX"。
      - 数学公式为 \(\sum_{n=1}^\infty \frac{1}{n^2} = \frac{\pi^2}{6}\)。
      - 两者垂直排列。
      - 播放写入标题和从下方淡入公式的动画。

    2. **转换标题并淡出公式**：
      - 标题转换为 "That was a transform" 并移动到左上角。
      - 公式逐个向下淡出。

    3. **显示网格和标题**：
      - 创建一个坐标网格 (`NumberPlane`)。
      - 新标题为 "This is a grid"。
      - 将网格和新标题添加到场景中，标题在网格之上。
      - 淡出旧标题，淡入新标题，创建网格动画。

    4. **对网格应用非线性变换**：
      - 新标题为 "That was a non-linear function applied to the grid"。
      - 对网格应用非线性变换函数，使网格点根据正弦函数移动。
      - 转换网格标题以反映新的描述。

    这个场景展示了文本和数学公式的动画效果，以及网格的非线性变换。
- name: SineCurveUnitCircle
  content: |
    class SineCurveUnitCircle(Scene):
        # contributed by heejin_park, https://infograph.tistory.com/230
        def construct(self):
            self.show_axis()
            self.show_circle()
            self.move_dot_and_draw_curve()
            self.wait()

        def show_axis(self):
            x_start = np.array([-6,0,0])
            x_end = np.array([6,0,0])

            y_start = np.array([-4,-2,0])
            y_end = np.array([-4,2,0])

            x_axis = Line(x_start, x_end)
            y_axis = Line(y_start, y_end)

            self.add(x_axis, y_axis)
            self.add_x_labels()

            self.origin_point = np.array([-4,0,0])
            self.curve_start = np.array([-3,0,0])

        def add_x_labels(self):
            x_labels = [
                MathTex("\pi"), MathTex("2 \pi"),
                MathTex("3 \pi"), MathTex("4 \pi"),
            ]

            for i in range(len(x_labels)):
                x_labels[i].next_to(np.array([-1 + 2*i, 0, 0]), DOWN)
                self.add(x_labels[i])

        def show_circle(self):
            circle = Circle(radius=1)
            circle.move_to(self.origin_point)
            self.add(circle)
            self.circle = circle

        def move_dot_and_draw_curve(self):
            orbit = self.circle
            origin_point = self.origin_point

            dot = Dot(radius=0.08, color=YELLOW)
            dot.move_to(orbit.point_from_proportion(0))
            self.t_offset = 0
            rate = 0.25

            def go_around_circle(mob, dt):
                self.t_offset += (dt * rate)
                # print(self.t_offset)
                mob.move_to(orbit.point_from_proportion(self.t_offset % 1))

            def get_line_to_circle():
                return Line(origin_point, dot.get_center(), color=BLUE)

            def get_line_to_curve():
                x = self.curve_start[0] + self.t_offset * 4
                y = dot.get_center()[1]
                return Line(dot.get_center(), np.array([x,y,0]), color=YELLOW_A, stroke_width=2 )


            self.curve = VGroup()
            self.curve.add(Line(self.curve_start,self.curve_start))
            def get_curve():
                last_line = self.curve[-1]
                x = self.curve_start[0] + self.t_offset * 4
                y = dot.get_center()[1]
                new_line = Line(last_line.get_end(),np.array([x,y,0]), color=YELLOW_D)
                self.curve.add(new_line)

                return self.curve

            dot.add_updater(go_around_circle)

            origin_to_circle_line = always_redraw(get_line_to_circle)
            dot_to_curve_line = always_redraw(get_line_to_curve)
            sine_curve_line = always_redraw(get_curve)

            self.add(dot)
            self.add(orbit, origin_to_circle_line, dot_to_curve_line, sine_curve_line)
            self.wait(8.5)

            dot.remove_updater(go_around_circle)
  description: |
    这段代码使用 Manim 库创建了一个展示单位圆和正弦曲线生成的动画场景：

    1. **显示坐标轴**：
      - 创建并添加 \(x\) 轴和 \(y\) 轴。
      - 添加 \(x\) 轴上的标签 \(\pi, 2\pi, 3\pi, 4\pi\)。

    2. **显示单位圆**：
      - 创建一个半径为 1 的圆，并移动到坐标系的原点（\([-4, 0, 0]\)）。

    3. **移动点并绘制正弦曲线**：
      - 在单位圆上移动一个黄色的点 (`dot`)。
      - 点沿着圆周移动，并从圆上的点画一条垂直线到正弦曲线上。
      - 动态更新垂直线和正弦曲线。

    这个场景展示了如何通过在单位圆上移动点来生成正弦曲线，并实时绘制曲线和相关的线段。