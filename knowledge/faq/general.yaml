- name: "general_usage_1"
  content: "Why does Manim say that 'there are no scenes inside that module'?\n\nThere are two main reasons why this error appears: if you have edited the file containing your Scene class and forgot to save it, or if you have accidentally passed the name of a wrong file to manim, this is a likely outcome. Check that you have spelled everything correctly.\n\nOtherwise, you are likely mixing up Manim versions. See this FAQ answer for an explanation regarding why there are different versions. Under the assumption that you are trying to use the manim executable from the terminal to run a scene that has been written for the community version (i.e., there is from manim import *, or more specifically from manim import Scene), then this error indicates that the manim executable has been overwritten by the one provided by manimgl (unfortunately, both manim and manimgl provide a manim executable).\n\nYou can check whether this is the case by running manim --version, the output of the community maintained version starts with Manim Community v.... If this is not the case, you are running manimgl.\n\nYou can resolve this by either of the following steps:\n\n- Un- and reinstalling manim,\n- using the manimce executable in place of the manim one,\n- or replacing the call to the executable with a direct call to the Python module via python -m manim."
  description: "Explanation of the error 'there are no scenes inside that module' and how to resolve it."

- name: "general_usage_2"
  content: "No matter what code I put in my file, Manim only renders a black frame! Why?\n\nIf you are using the usual pattern to write a Scene, i.e.,\n\n```python\nclass MyAwesomeScene(Scene):\n    def construct(self):\n        ...\n        # your animation code\n```\n\nthen double check whether you have spelled construct correctly. If the method containing your code is not called construct (or if you are not calling a different, custom method from construct), Manim will not call your method and simply output a black frame."
  description: "Troubleshooting black frame rendering in Manim."

- name: "general_usage_3"
  content: "What are the default measurements for Manim’s scene?\n\nThe scene measures 8 units in height and has a default ratio of 16:9, which means that it measures 14.22 units in width. The origin is in the center of the scene, which means that, for example, the upper left corner of the scene has coordinates [-7-1/9, 4, 0]."
  description: "Default measurements for Manim's scene."

- name: "general_usage_4"
  content: "How do I find out which keyword arguments I can pass when creating a Mobject?\n\nLet us consider a specific example, like the Circle class. When looking at its documentation page, only two specific keyword arguments are listed (radius, and color). Besides these concrete arguments, there is also a catchall **kwargs argument which captures all other arguments that are passed to Circle, and passes them on to the base class of Circle, Arc.\n\nThe same holds for Arc: some arguments are explicitly documented, and there is again a catchall **kwargs argument that passes unprocessed arguments to the next base class – and so on.\n\nThe most important keyword arguments relevant to styling your mobjects are the ones that are documented for the base classes VMobject and Mobject."
  description: "How to find keyword arguments for creating Mobjects in Manim."

- name: "general_usage_5"
  content: "Can Manim render a video with transparent background?\n\nYes: simply pass the CLI flag -t (or its long form --transparent). Note that the default video file format does not support transparency, which is why Manim will output a .mov instead of a .mp4 when rendering with a transparent background. Other movie file formats that support transparency can be obtained by passing --format=webm or --format=gif."
  description: "Rendering videos with transparent background in Manim."

- name: "general_usage_6"
  content: "I have watched a video where a creator ran command X, but it does not work for me. Why?\n\nThe video you have been watching is likely outdated. If you want to follow along, you either need to use the same version used in the video, or modify the code (in many cases it is just a method having been renamed etc.) accordingly. Check the video description, in some cases creators point out whether changes need to be applied to the code shown in the video."
  description: "Troubleshooting outdated commands in Manim tutorial videos."

- name: "general_usage_7"
  content: "When using Tex or MathTex, some letters are missing. How can I fix this?\n\nIt is possible that you have to (re)build some fonts used by LaTeX. For some distributions, you can do this manually by running\n\n```bash\nfmtutil -sys --all\n```\n\nWe recommend consulting the documentation of your LaTeX distribution for more information."
  description: "Fixing missing letters in Tex or MathTex in Manim."

- name: "general_usage_8"
  content: "I want to translate some code from manimgl to manim, what do I do with CONFIG dictionaries?\n\nThe community-maintained version has dropped the use of CONFIG dictionaries very early, with version v0.2.0 released in January 2021.\n\nBefore that, Manim’s classes basically processed CONFIG dictionaries by mimicking inheritance (to properly process CONFIG dictionaries set by parent classes) and then assigning all of the key-value-pairs in the dictionary as attributes of the corresponding object.\n\nIn situations where there is not much inheritance going on, or for any custom setting, you should set these attributes yourself. For example, for an old-style Scene with custom attributes like\n\n```python\nclass OldStyle(Scene):\n    CONFIG = {'a': 1, 'b': 2}\n```\n\nshould be written as\n\n```python\nclass NewStyle(Scene):\n    a = 1\n    b = 2\n```\n\nIn situations where values should be properly inherited, the arguments should be added to the initialization function of the class. An old-style mobject Thing could look like\n\n```python\nclass Thing(VMobject):\n    CONFIG = {\n        'stroke_color': RED,\n        'fill_opacity': 0.7,\n        'my_awesome_argument': 42,\n    }\n```\n\nwhere stroke_color and fill_opacity are arguments that concern the parent class of Thing, and my_awesome_argument is a custom argument that only concerns Thing. A version without CONFIG could look like this:\n\n```python\nclass Thing(VMobject):\n    def __init__(self, stroke_color=RED, fill_opacity=0.7, my_awesome_argument=42, **kwargs):\n        self.my_awesome_argument = my_awesome_argument\n        super().__init__(stroke_color=stroke_color, fill_opacity=fill_opacity, **kwargs)\n```"
  description: "Translating CONFIG dictionaries from manimgl to manim."

- name: "general_usage_9"
  content: "My installation does not support converting PDF to SVG, help?\n\nThis is an issue with dvisvgm, the tool shipped with LaTeX that transforms LaTeX output to a .svg file that Manim can parse.\n\nFirst, make sure your dvisvgm version is at least 2.4 by checking the output of\n\n```bash\ndvisvgm --version\n```\n\nIf you do not know how to update dvisvgm, please refer to your LaTeX distributions documentation (or the documentation of your operating system, if dvisvgm was installed as a system package).\n\nSecond, check whether your dvisvgm supports PostScript specials. This is needed to convert from PDF to SVG. Run:\n\n```bash\ndvisvgm -l\n```\n\nIf the output to this command does not contain ps  dvips PostScript specials, this is a bad sign. In this case, run\n\n```bash\ndvisvgm -h\n```\n\nIf the output does not contain --libgs=filename, this means your dvisvgm does not currently support PostScript. You must get another binary.\n\nIf, however, --libgs=filename appears in the help, that means that your dvisvgm needs the Ghostscript library to support PostScript. Search for libgs.so (on Linux, probably in /usr/local/lib or /usr/lib) or gsdll32.dll (on 32-bit Windows, probably in C:\\windows\\system32) or gsdll64.dll (on 64-bit Windows, also probably in C:\\windows\\system32) or libgsl.dylib (on MacOS, probably in /usr/local/lib or /opt/local/lib). Please look carefully, as the file might be located elsewhere, e.g. in the directory where Ghostscript is installed.\n\nWhen you have found the library, try (on MacOS or Linux)\n\n```bash\nexport LIBGS=<path to your library including the file name>\ndvisvgm -l\n```\n\nor (on Windows)\n\n```bash\nset LIBGS=<path to your

 library including the file name>\ndvisvgm -l\n```\n\nYou should now see ps    dvips PostScript specials in the output. Refer to your operating system’s documentation to find out how you can set or export the environment variable LIBGS automatically whenever you open a shell.\n\nAs a last check, you can run\n\n```bash\ndvisvgm -V1\n```\n\n(while still having LIBGS set to the correct path, of course.) If dvisvgm can find your Ghostscript installation, it will be shown in the output together with the version number.\n\nIf you do not have the necessary library on your system, please refer to your operating system’s documentation to find out where you can get it and how you have to install it.\n\nIf you are unable to solve your problem, check out the dvisvgm FAQ."
  description: "Resolving issues with converting PDF to SVG in Manim installations."

- name: "general_usage_10"
  content: "Where can I find more resources for learning Manim?\n\nIn our Discord server, we have the community-maintained #beginner-resources channel in which links to helpful learning resources are collected. You are welcome to join our Discord and take a look yourself! If you have found some guides or tutorials yourself that are not on our list yet, feel free to add them!"
  description: "Finding additional resources for learning Manim."

- name: "missing_pkg_resources_error"
  content: "No module named pkg_resources\n\nI'm deploying a Django app to a dev server and am hitting this error when I run pip install -r requirements.txt:\n\n```python\nTraceback (most recent call last):\n  File \"/var/www/mydir/virtualenvs/dev/bin/pip\", line 5, in <module>\n    from pkg_resources import load_entry_point\nImportError: No module named pkg_resources\n```\n\npkg_resources appears to be distributed with setuptools. Initially, I thought this might not be installed to the Python in the virtualenv, so I installed setuptools 2.6 (same version as Python) to the Python site-packages in the virtualenv with the following command:\n\n```sh\nsh setuptools-0.6c11-py2.6.egg --install-dir /var/www/mydir/virtualenvs/dev/lib/python2.6/site-packages\n```\n\n**EDIT:** This only happens inside the virtualenv. If I open a console outside the virtualenv, then pkg_resources is present, but I am still getting the same error.\n\nAny ideas as to why pkg_resources is not on the path?\n\n**Solution:**\n\nMost people should now use pip install setuptools (possibly with sudo).\n\nSome may need to (re)install the python-setuptools package via their package manager (apt-get install, yum install, etc.).\n\nThis issue can be highly dependent on your OS and dev environment. See the legacy/other answers below if the above isn't working for you.\n\n**Explanation**\n\nThis error message is caused by a missing/broken Python setuptools package. Per Matt M.'s comment and setuptools issue #581, the bootstrap script referred to below is no longer the recommended installation method.\n\nThe bootstrap script instructions will remain below, in case it's still helpful to anyone.\n\n**Legacy Answer**\n\nI encountered the same ImportError today while trying to use pip. Somehow the setuptools package had been deleted in my Python environment.\n\nTo fix the issue, run the setup script for setuptools:\n\n```sh\nwget https://bootstrap.pypa.io/ez_setup.py -O - | python\n```\n\n(or if you don't have wget installed (e.g., OS X), try\n\n```sh\ncurl https://bootstrap.pypa.io/ez_setup.py | python\n```\n\npossibly with sudo prepended.)\n\nIf you have any version of distribute, or any setuptools below 0.6, you will have to uninstall it first.*\n\nSee Installation Instructions for further details.\n\n* If you already have a working distribute, upgrading it to the 'compatibility wrapper' that switches you over to setuptools is easier. But if things are already broken, don't try that."
  description: "Issue and solution for missing pkg_resources module error when running pip install in a virtualenv."
