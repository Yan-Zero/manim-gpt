- name: "Adding Voiceovers to Videos-voiceovers"
  content: "Creating a full-fledged video with voiceovers is a bit more involved than creating purely visual Manim scenes. One has to use a video editing program to add the voiceovers after the video has been rendered. This process can be difficult and time-consuming, since it requires a lot of planning and preparation.\n\nTo ease the process of adding voiceovers to videos, we have created Manim Voiceover, a plugin that lets you add voiceovers to scenes directly in Python. To install it, run:\n\npip install 'manim-voiceover[azure,gtts]'\n\nVisit the installation page for more details on how to install Manim Voiceover."
  description: "Introduction to adding voiceovers to Manim videos using the Manim Voiceover plugin."

- name: "Basic Usage-voiceovers"
  content: "Manim Voiceover lets you:\n\n- Add voiceovers to Manim videos directly in Python, without having to use a video editor.\n\n- Record voiceovers with your microphone during rendering through a simple command line interface.\n\n- Develop animations with auto-generated AI voices from various free and proprietary services.\n\nIt provides a very simple API that lets you specify your voiceover script and then record it during rendering:\n\n```python\nfrom manim import *\nfrom manim_voiceover import VoiceoverScene\nfrom manim_voiceover.services.recorder import RecorderService\n\n# Simply inherit from VoiceoverScene instead of Scene to get all the\n# voiceover functionality.\nclass RecorderExample(VoiceoverScene):\n    def construct(self):\n        # You can choose from a multitude of TTS services,\n        # or in this example, record your own voice:\n        self.set_speech_service(RecorderService())\n\n        circle = Circle()\n\n        # Surround animation sections with with-statements:\n        with self.voiceover(text='This circle is drawn as I speak.') as tracker:\n            self.play(Create(circle), run_time=tracker.duration)\n            # The duration of the animation is received from the audio file\n            # and passed to the tracker automatically.\n\n        # This part will not start playing until the previous voiceover is finished.\n        with self.voiceover(text='Let's shift it to the left 2 units.') as tracker:\n            self.play(circle.animate.shift(2 * LEFT), run_time=tracker.duration)\n```\n\nTo get started with Manim Voiceover, visit the Quick Start Guide.\n\nVisit the Example Gallery to see some examples of Manim Voiceover in action."
  description: "Basic usage of the Manim Voiceover plugin, including a code example for adding voiceovers to animations."

- name: "Rendering Text and Formulas-using-text"
  content: "There are two different ways by which you can render Text in videos:\n\n1. Using Pango (text_mobject)\n\n2. Using LaTeX (tex_mobject)\n\nIf you want to render simple text, you should use either Text or MarkupText, or one of its derivatives like Paragraph. See Text Without LaTeX for more information.\n\nLaTeX should be used when you need mathematical typesetting. See Text With LaTeX for more information."
  description: "Introduction to rendering text and formulas in Manim using Pango and LaTeX."

- name: "Text Without LaTeX-using-text"
  content: "The simplest way to add text to your animations is to use the Text class. It uses the Pango library to render text. With Pango, you can also render non-English alphabets like 你好 or こんにちは or 안녕하세요 or مرحبا بالعالم.\n\nHere is a simple Hello World animation.\n\nExample: HelloWorld \n\n```python\nfrom manim import *\n\nclass HelloWorld(Scene):\n    def construct(self):\n        text = Text('Hello world', font_size=144)\n        self.add(text)\n```\n\nYou can also use MarkupText which allows the use of PangoMarkup (see the documentation of MarkupText for details) to render text. For example:\n\nExample: SingleLineColor \n\n```python\nfrom manim import *\n\nclass SingleLineColor(Scene):\n    def construct(self):\n        text = MarkupText(f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED)\n        self.add(text)\n```"
  description: "Guide on rendering simple text using the Text class and MarkupText with Pango in Manim."

- name: "Working with Text-using-text"
  content: "This section explains the properties of Text and how can it be used in your animations.\n\n### Using Fonts\nYou can set a different font using font.\n\nNote: The font used must be installed in your system, and Pango should know about it. You can get a list of fonts using manimpango.list_fonts().\n\n```python\nimport manimpango\nmanimpango.list_fonts()\n```\n\nExample: FontsExample \n\n```python\nfrom manim import *\n\nclass FontsExample(Scene):\n    def construct(self):\n        ft = Text('Noto Sans', font='Noto Sans')\n        self.add(ft)\n```\n\n### Setting Slant and Weight\nSlant is the style of the Text, and it can be NORMAL (the default), ITALIC, or OBLIQUE. Usually, for many fonts both ITALIC and OBLIQUE look similar, but ITALIC uses Roman Style, whereas OBLIQUE uses Italic Style.\n\nWeight specifies the boldness of a font. You can see a list of weights in manimpango.Weight.\n\nExample: SlantsExample \n\n```python\nfrom manim import *\n\nclass SlantsExample(Scene):\n    def construct(self):\n        a = Text('Italic', slant=ITALIC)\n        self.add(a)\n```\n\nExample: DifferentWeight \n\n```python\nfrom manim import *\n\nclass DifferentWeight(Scene):\n    def construct(self):\n        import manimpango\n\n        g = VGroup()\n        weight_list = dict(\n            sorted(\n                {\n                    weight: manimpango.Weight(weight).value\n                    for weight in manimpango.Weight\n                }.items(),\n                key=lambda x: x[1],\n            )\n        )\n        for weight in weight_list:\n            g += Text(weight.name, weight=weight.name, font='Open Sans')\n        self.add(g.arrange(DOWN).scale(0.5))\n```\n\n### Using Colors\nYou can set the color of the text using color:\n\nExample: SimpleColor \n\n```python\nfrom manim import *\n\nclass SimpleColor(Scene):\n    def construct(self):\n        col = Text('RED COLOR', color=RED)\n        self.add(col)\n```\n\nYou can use utilities like t2c for coloring specific characters. This may be problematic if your text contains ligatures as explained in Iterating Text.\n\nt2c accepts two types of dictionaries,\n\n- The keys can contain indices like [2:-1] or [4:8], this works similar to how slicing works in Python. The values should be the color of the Text from Color.\n\n- The keys contain words or characters which should be colored separately and the values should be the color from Color:\n\nExample: Textt2cExample \n\n```python\nfrom manim import *\n\nclass Textt2cExample(Scene):\n    def construct(self):\n        t2cindices = Text('Hello', t2c={'[1:-1]': BLUE}).move_to(LEFT)\n        t2cwords = Text('World', t2c={'rl':RED}).next_to(t2cindices, RIGHT)\n        self.add(t2cindices, t2cwords)\n```\n\nIf you want to avoid problems when using colors (due to ligatures), consider using MarkupText.\n\n### Using Gradients\nYou can add a gradient using gradient. The value must be an iterable of any length:\n\nExample: GradientExample \n\n```python\nfrom manim import *\n\nclass GradientExample(Scene):\n    def construct(self):\n        t = Text('Hello', gradient=(RED, BLUE, GREEN), font_size=96)\n        self.add(t)\n```\n\nYou can also use t2g for gradients with specific characters of the text. It shares a similar syntax to the interface for colors:\n\nExample: t2gExample \n\n```python\nfrom manim import *\n\nclass t2gExample(Scene):\n    def construct(self):\n        t2gindices = Text(\n            'Hello',\n            t2g={\n                '[1:-1]': (RED, GREEN),\n            },\n        ).move_to(LEFT)\n        t2gwords = Text(\n            'World',\n            t2g={\n                'World': (RED, BLUE),\n            },\n        ).next_to(t2gindices, RIGHT)\n        self.add(t2gindices, t2gwords)\n```\n\n### Setting Line Spacing\nYou can set the line spacing using line_spacing:\n\nExample: LineSpacing \n\n```python\nfrom manim import *\n\nclass LineSpacing(Scene):\n    def construct(self):\n        a = Text('Hello\nWorld', line_spacing=1)\n        b = Text('Hello\nWorld', line_spacing=4)\n        self.add(Group(a, b).arrange(LEFT, buff=5))\n```\n\n### Disabling Ligatures\nBy disabling ligatures you would get a one-to-one mapping between characters and submobjects. This fixes the issues with coloring text.\n\nWarning: Be aware that using this method with text that heavily depends on ligatures (Arabic text) may yield unexpected results.\n\nYou can disable ligatures by passing disable_ligatures to Text. For example:\n\nExample: DisableLigature \n\n```python\nfrom manim import *\n\nclass DisableLigature(Scene):\n    def construct(self):\n        li = Text('fl ligature', font_size=96)\n        nli = Text('fl ligature', disable_ligatures=True, font_size=96)\n        self.add(Group(li, nli).arrange(DOWN, buff=.8))\n```\n\n### Iterating Text\nText objects behave like VGroups. Therefore, you can slice and index the text.\n\nFor example, you can set each letter to different color by iterating it.\n\nExample: IterateColor \n\n```python\nfrom manim import *\n\nclass IterateColor(Scene):\n    def construct(self):\n        text = Text('Colors', font_size=96)\n        for letter in text:\n            letter.set_color(random_bright_color())\n        self.add(text)\n```\n\nWarning: Please note that Ligature can cause problems here. If you need a one-to-one mapping of characters to submobjects you should pass the disable_ligatures parameter to Text. See Disabling Ligatures."
  description: "Detailed guide on working with Text in Manim, including fonts, slant, weight, colors, gradients, line spacing, ligatures, and iterating text."

- name: "Working with MarkupText-using-text"
  content: "MarkupText is similar to Text, the only difference between them is that this accepts and processes PangoMarkup (which is similar to html), instead of just rendering plain text.\n\nConsult the documentation of MarkupText for more details and further references about PangoMarkup.\n\nExample: MarkupTest \n\n```python\nfrom manim import *\n\nclass MarkupTest(Scene):\n    def construct(self):\n        text = MarkupText(\n            f'<span underline=\"double\" underline_color=\"green\">double green underline</span> in red text<span fgcolor=\"{YELLOW}\"> except this</span>',\n            color=RED,\n            font_size=34\n        )\n        self.add(text)\n```\n"
  description: "Guide on working with MarkupText in Manim for rendering text with PangoMarkup."

- name: "Text With LaTeX-using-text"
  content: "Just as you can use Text to add text to your videos, you can use Tex to insert LaTeX.\n\nFor example,\n\nExample: HelloLaTeX \n\n```python\nfrom manim import *\n\nclass HelloLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r'\\LaTeX', font_size=144)\n        self.add(tex)\n```\n\nNote: Note that we are using a raw string (r'...') instead of a regular string ('...'). This is because TeX code uses a lot of special characters - like \\ for example - that have special meaning within a regular python string. An alternative would have been to write \\\\ to escape the backslash: Tex('\\\\LaTeX')."
  description: "Guide on using LaTeX in Manim to render mathematical typesetting."

- name: "Working with MathTex-using-text"
  content: "Everything passed to MathTex is in math mode by default. To be more precise, MathTex is processed within an align* environment. You can achieve a similar effect with Tex by enclosing your formula with $ symbols: $\\xrightarrow{x^6y^8}$:\n\nExample: MathTeXDemo \n\n```python\nfrom manim import *\n\nclass MathTeXDemo(Scene):\n    def construct(self):\n        rtarrow0 = MathTex(r'\\xrightarrow{x^6y^8}', font_size=96)\n        rtarrow1 = Tex(r'$\\xrightarrow{x^6y^8}$', font_size=96)\n\n        self.add(VGroup(rtarrow0, rtarrow1).arrange(DOWN))\n```\n\n### LaTeX commands and keyword arguments\nWe can use any standard LaTeX commands in the AMS maths packages. Such as the mathtt math-text type or the looparrowright arrow.\n\nExample: AMSLaTeX \n\n```python\nfrom manim import *\n\nclass AMSLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r'$\\mathtt{H} \\looparrowright$ \\LaTeX', font_size=144)\n        self.add(tex)\n```\n\nOn the Manim side, the Tex class also accepts attributes to change the appearance of the output. This is very similar to the Text class. For example, the color keyword changes the color of the TeX mobject.\n\nExample: LaTeXAttributes \n\n```python\nfrom manim import *\n\nclass LaTeXAttributes(Scene):\n    def construct(self):\n        tex = Tex(r'Hello \\LaTeX', color=BLUE, font_size=144)\n        self.add(tex)\n```"
  description: "Guide on using MathTex for rendering mathematical expressions and using LaTeX commands in Manim."

- name: "Extra LaTeX Packages-using-text"
  content: "Some commands require special packages to be loaded into the TeX template. For example, to use the mathscr script, we need to add the mathrsfs package. Since this package isn’t loaded into Manim’s tex template by default, we have to add it manually.\n\nExample: AddPackageLatex \n\n```python\nfrom manim import *\n\nclass AddPackageLatex(Scene):\n    def construct(self):\n        myTemplate = TexTemplate()\n        myTemplate.add_to_preamble(r'\\usepackage{mathrsfs}')\n        tex = Tex(\n            r'$\\mathscr{H} \\rightarrow \\mathbb{H}$',\n            tex_template=myTemplate,\n            font_size=144,\n        )\n        self.add(tex)\n```\n"
  description: "Guide on adding extra LaTeX packages to Manim's TeX template for additional commands."

- name: "Substrings and Parts-using-text"
  content: "The TeX mobject can accept multiple strings as arguments. Afterwards, you can refer to the individual parts either by their index (like tex[1]), or by selecting parts of the tex code. In this example, we set the color of the \\bigstar using set_color_by_tex():\n\nExample: LaTeXSubstrings \n\n```python\nfrom manim import *\n\nclass LaTeXSubstrings(Scene):\n    def construct(self):\n        tex = Tex('Hello', r'$\\bigstar$', r'\\LaTeX', font_size=144)\n        tex.set_color_by_tex('igsta', RED)\n        self.add(tex)\n```\n\nNote that set_color_by_tex() colors the entire substring containing the Tex, not just the specific symbol or Tex expression. Consider the following example:\n\nExample: IncorrectLaTeXSubstringColoring \n\n```python\nfrom manim import *\n\nclass IncorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r'e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots'\n        )\n        equation.set_color_by_tex('x', YELLOW)\n        self.add(equation)\n```\n\nAs you can see, this colors the entire equation yellow, contrary to what may be expected. To color only x yellow, we have to do the following:\n\nExample: CorrectLaTeXSubstringColoring \n\n```python\nfrom manim import *\n\nclass CorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r'e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots',\n            substrings_to_isolate='x'\n        )\n        equation.set_color_by_tex('x', YELLOW)\n        self.add(equation)\n```\n\nBy setting substrings_to_isolate to x, we split up the MathTex into substrings automatically and isolate the x components into individual substrings. Only then can set_color_by_tex() be used to achieve the desired result.\n\nNote that Manim also supports a custom syntax that allows splitting a TeX string into substrings easily: simply enclose parts of your formula that you want to isolate with double braces. In the string MathTex(r'{{ a^2 }} + {{ b^2 }} = {{ c^2 }}'), the rendered mobject will consist of the substrings a^2, +, b^2, =, and c^2. This makes transformations between similar text fragments easy to write using TransformMatchingTex."
  description: "Guide on working with substrings and parts in LaTeX expressions in Manim, including examples and color customization."

- name: "Using index_labels to Work with Complicated Strings-using-text"
  content: "You might sometimes be working with a very complicated MathTex mobject that makes it difficult to work with its individual components. This is where the debugging function index_labels() is very useful.\n\nThe method shows the index of a mobject’s submobjects, allowing you to easily find the components of the mobject you would like to change.\n\nExample: IndexLabelsMathTex \n\n```python\nfrom manim import *\n\nclass IndexLabelsMathTex(Scene):\n    def construct(self):\n        text = MathTex(r'\\binom{2n}{n+2}', font_size=96)\n\n        # index the first (and only) term of the MathTex mob\n        self.add(index_labels(text[0]))\n\n        text[0][1:3].set_color(YELLOW)\n        text[0][3:6].set_color(RED)\n        self.add(text)\n```\n"
  description: "Using index_labels for debugging and working with complicated MathTex strings in Manim."

- name: "LaTeX Maths Fonts - The Template Library-using-text"
  content: "Changing fonts in LaTeX when typesetting mathematical formulae is trickier than regular text. It requires changing the template that is used to compile the TeX. Manim comes with a collection of TexFontTemplates ready for you to use. These templates will all work in math mode:\n\nExample: LaTeXMathFonts \n\n```python\nfrom manim import *\n\nclass LaTeXMathFonts(Scene):\n    def construct(self):\n        tex = Tex(\n            r'$x^2 + y^2 = z^2$',\n            tex_template=TexFontTemplates.french_cursive,\n            font_size=144,\n        )\n        self.add(tex)\n```\n\nManim also has a TexTemplateLibrary containing the TeX templates used by 3Blue1Brown. One example is the ctex template, used for typesetting Chinese script. For this to work, the ctex LaTeX package must be installed on your system. Furthermore, if you are only typesetting Text, you probably do not need Tex at all, and should use Text instead.\n\nExample: LaTeXTemplateLibrary \n\n```python\nfrom manim import *\n\nclass LaTeXTemplateLibrary(Scene):\n    def construct(self):\n        tex = Tex('Hello 你好 \\LaTeX', tex_template=TexTemplateLibrary.ctex, font_size=144)\n        self.add(tex)\n```\n"
  description: "Guide on using LaTeX maths fonts and template libraries in Manim."

- name: "Aligning Formulae-using-text"
  content: "MathTex mobject is typeset in the LaTeX align* environment. This means you can use the & alignment character when typesetting multiline formulae:\n\nExample: LaTeXAlignEnvironment \n\n```python\nfrom manim import *\n\nclass LaTeXAlignEnvironment(Scene):\n    def construct(self):\n        tex = MathTex(r'f(x) &= 3 + 2 + 1\\\\ &= 5 + 1 \\\\ &= 6', font_size=96)\n        self.add(tex)\n```\n"
  description: "Guide on aligning multiline formulae using the align* environment in LaTeX in Manim."
