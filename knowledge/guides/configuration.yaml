- name: "Configuration-configuration"
  content: "Manim provides an extensive configuration system that allows it to adapt to many different use cases. There are many configuration options that can be configured at different times during the scene rendering process. Each option can be configured programmatically via the ManimConfig class, at the time of command invocation via command-line arguments, or at the time the library is first imported via the config files.\n\nThe most common, simplest, and recommended way to configure Manim is via the command-line interface (CLI), which is described directly below."
  description: "Introduction to Manim's configuration system, including options for programmatic, command-line, and config file settings."

- name: "Command-line arguments-configuration"
  content: "By far the most commonly used command in the CLI is the render command, which is used to render scene(s) to an output file. It is used with the following arguments:\n\nManim Community v0.18.1\n\nUsage: manim render [OPTIONS] FILE [SCENE_NAMES]...\n\n  Render SCENE(S) from the input FILE.\n\n  FILE is the file path of the script or a config file.\n\n  SCENES is an optional list of scenes in the file.\n...\nHowever, since Manim defaults to the render command whenever no command is specified, the following form is far more common and can be used instead:\n\nmanim [OPTIONS] FILE [SCENES]\n\nAn example of using the above form is:\n\nmanim -qm file.py SceneOne\n\nThis asks Manim to search for a Scene class called SceneOne inside the file file.py and render it with medium quality (specified by the -qm flag).\n\nAnother frequently used flag is -p ('preview'), which makes manim open the rendered video after it’s done rendering.\n\nNote: The -p flag does not change any properties of the global config dict. The -p flag is only a command-line convenience."
  description: "Explanation of the most commonly used command-line arguments for rendering scenes with Manim."

- name: "Advanced examples-configuration"
  content: "To render a scene in high quality, but only output the last frame of the scene instead of the whole video, you can execute\n\nmanim -sqh <file.py> SceneName\n\nThe following example specifies the output file name (with the -o flag), renders only the first ten animations (-n flag) with a white background (-c flag), and saves the animation as a .gif instead of as a .mp4 file (--format=gif flag). It uses the default quality and does not try to open the file after it is rendered.\n\nmanim -o myscene --format=gif -n 0,10 -c WHITE <file.py> SceneName"
  description: "Examples of advanced command-line usage for rendering scenes with specific settings and formats."

- name: "A list of all CLI flags-configuration"
  content: "$ manim --help\n\nManim Community v0.18.1\n\nUsage: manim [OPTIONS] COMMAND [ARGS]...\n\n  Animation engine for explanatory math videos.\n\nOptions:\n  --version                      Show version and exit.\n  --show-splash / --hide-splash  Print splash message with version information.\n  --help                         Show this message and exit.\n\nCommands:\n  cfg          Manages Manim configuration files.\n  checkhealth  This subcommand checks whether Manim is installed correctly...\n  init         Create a new project or insert a new scene.\n  plugins      Manages Manim plugins.\n  render       Render SCENE(S) from the input FILE.\n\nSee 'manim <command>' to read about a specific subcommand.\n\nNote: the subcommand 'manim render' is called if no other subcommand is specified. Run 'manim render --help' if you would like to know what the '-ql' or '-p' flags do, for example.\n\nMade with <3 by Manim Community developers."
  description: "Overview of all CLI flags available in Manim for configuring and rendering scenes."

- name: "The ManimConfig class-configuration"
  content: "The most direct way of configuring Manim is through the global config object, which is an instance of ManimConfig. Each property of this class is a config option that can be accessed either with standard attribute syntax or with dict-like syntax:\n\n```python\nfrom manim import *\nconfig.background_color = WHITE\nconfig['background_color'] = WHITE\n```\n\nNote: The former is preferred; the latter is provided for backwards compatibility.\n\nMost classes, including Camera, Mobject, and Animation, read some of their default configuration from the global config.\n\n```python\nCamera({}).background_color\n<Color white>\nconfig.background_color = RED  # 0xfc6255\nCamera({}).background_color\n<Color #fc6255>\n```\n\nManimConfig is designed to keep internal consistency. For example, setting frame_y_radius will affect frame_height:\n\n```python\nconfig.frame_height\n8.0\nconfig.frame_y_radius = 5.0\nconfig.frame_height\n10.0\n```\n\nThe global config object is meant to be the single source of truth for all config options. All of the other ways of setting config options ultimately change the values of the global config object."
  description: "Explanation of the ManimConfig class for direct programmatic configuration of Manim settings."

- name: "The config files-configuration"
  content: "As the last example shows, executing Manim from the command line may involve using many flags simultaneously. This may become a nuisance if you must execute the same script many times in a short time period, for example, when making small incremental tweaks to your scene script. For this reason, Manim can also be configured using a configuration file. A configuration file is a file ending with the suffix .cfg.\n\nTo use a local configuration file when rendering your scene, you must create a file with the name manim.cfg in the same directory as your scene code.\n\nWarning: The config file must be named manim.cfg. Currently, Manim does not support config files with any other name.\n\nThe config file must start with the section header [CLI]. The configuration options under this header have the same name as the CLI flags and serve the same purpose. Take, for example, the following config file.\n\n```ini\n[CLI]\n# my config file\noutput_file = myscene\nsave_as_gif = True\nbackground_color = WHITE\n```\n\nConfig files are parsed with the standard python library configparser. In particular, they will ignore any line that starts with a pound symbol #.\n\nNow, executing the following command\n\nmanim -o myscene -i -c WHITE <file.py> SceneName\n\nis equivalent to executing the following command, provided that manim.cfg is in the same directory as <file.py>,\n\nmanim <file.py> SceneName\n\nTip: The names of the configuration options admissible in config files are exactly the same as the long names of the corresponding command-line flags. For example, the -c and --background_color flags are interchangeable, but the config file only accepts background_color as an admissible option."
  description: "Instructions for using configuration files to manage Manim settings, including a sample config file and usage tips."

- name: "The user config file-configuration"
  content: "As explained in the previous section, a manim.cfg config file only affects the scene scripts in its same folder. However, the user may also create a special config file that will apply to all scenes rendered by that user. This is referred to as the user-wide config file, and it will apply regardless of where Manim is executed from, and regardless of where the scene script is stored.\n\nThe user-wide config file lives in a special folder, depending on the operating system.\n\nWindows: UserDirectory/AppData/Roaming/Manim/manim.cfg\n\nMacOS: UserDirectory/.config/manim/manim.cfg\n\nLinux: UserDirectory/.config/manim/manim.cfg\n\nHere, UserDirectory is the user’s home folder.\n\nNote: A user may have many folder-wide config files, one per folder, but only one user-wide config file. Different users in the same computer may each have their own user-wide config file.\n\nWarning: Do not store scene scripts in the same folder as the user-wide config file. In this case, the behavior is undefined.\n\nWhenever you use Manim from anywhere in the system, Manim will look for a user-wide config file and read its configuration."
  description: "Explanation of the user-wide configuration file for Manim, including default locations and warnings."

- name: "Cascading config files-configuration"
  content: "What happens if you execute Manim and it finds both a folder-wide config file and a user-wide config file? Manim will read both files, but if they are incompatible, the folder-wide file takes precedence.\n\nFor example, take the following user-wide config file\n\n```ini\n# user-wide\n[CLI]\noutput_file = myscene\nsave_as_gif = True\nbackground_color = WHITE\n```\n\nand the following folder-wide file\n\n```ini\n# folder-wide\n[CLI]\nsave_as_gif = False\n```\n\nThen, executing manim <file.py> SceneName will be equivalent to not using any config files and executing\n\nmanim -o myscene -c WHITE <file.py> SceneName\n\nAny command-line flags have precedence

 over any config file. For example, using the previous two config files and executing manim -c RED <file.py> SceneName is equivalent to not using any config files and executing\n\nmanim -o myscene -c RED <file.py> SceneName\n\nThere is also a library-wide config file that determines Manim’s default behavior and applies to every user of the library. It has the least precedence, so any config options in the user-wide and any folder-wide files will override the library-wide file. This is referred to as the cascading config file system.\n\nWarning: The user should not try to modify the library-wide file. Contributors should receive explicit confirmation from the core developer team before modifying it."
  description: "Explanation of the cascading configuration file system in Manim, detailing the order of precedence and examples."

- name: "Order of operations-configuration"
  content: "With so many different ways of configuring Manim, it can be difficult to know when each config option is being set. In fact, this will depend on how Manim is being used.\n\nIf Manim is imported from a module, then the configuration system will follow these steps:\n\n1. The library-wide config file is loaded.\n\n2. The user-wide and folder-wide files are loaded if they exist.\n\n3. All files found in the previous two steps are parsed in a single ConfigParser object, called parser. This is where cascading happens.\n\n4. logging.Logger is instantiated to create Manim’s global logger object. It is configured using the 'logger' section of the parser, i.e. parser['logger'].\n\n5. ManimConfig is instantiated to create the global config object.\n\n6. The parser from step 3 is fed into the config from step 5 via ManimConfig.digest_parser().\n\n7. Both logger and config are exposed to the user.\n\nIf Manim is being invoked from the command line, all of the previous steps happen, and are complemented by:\n\n1. The CLI flags are parsed and fed into config via digest_args().\n\n2. If the --config_file flag was used, a new ConfigParser object is created with the contents of the library-wide file, the user-wide file if it exists, and the file passed via --config_file. In this case, the folder-wide file, if it exists, is ignored.\n\n3. The new parser is fed into config.\n\n4. The rest of the CLI flags are processed.\n\nTo summarize, the order of precedence for configuration options, from lowest to highest precedence is:\n\n1. Library-wide config file,\n\n2. user-wide config file, if it exists,\n\n3. folder-wide config file, if it exists OR custom config file, if passed via --config_file,\n\n4. other CLI flags, and\n\n5. any programmatic changes made after the config system is set."
  description: "Detailed explanation of the order of operations for Manim's configuration system, including steps for both module imports and command-line usage."

- name: "A list of all config options-configuration"
  content: "['aspect_ratio', 'assets_dir', 'background_color', 'background_opacity', 'bottom', 'custom_folders', 'disable_caching', 'dry_run', 'ffmpeg_loglevel', 'flush_cache', 'frame_height', 'frame_rate', 'frame_size', 'frame_width', 'frame_x_radius', 'frame_y_radius', 'from_animation_number', 'fullscreen', 'images_dir', 'input_file', 'left_side', 'log_dir', 'log_to_file', 'max_files_cached', 'media_dir', 'media_width', 'movie_file_extension', 'notify_outdated_version', 'output_file', 'partial_movie_dir', 'pixel_height', 'pixel_width', 'plugins', 'preview', 'progress_bar', 'quality', 'right_side', 'save_as_gif', 'save_last_frame', 'save_pngs', 'scene_names', 'show_in_file_browser', 'sound', 'tex_dir', 'tex_template', 'tex_template_file', 'text_dir', 'top', 'transparent', 'upto_animation_number', 'use_opengl_renderer', 'verbosity', 'video_dir', 'window_position', 'window_monitor', 'window_size', 'write_all', 'write_to_movie', 'enable_wireframe', 'force_window']"
  description: "List of all configuration options available in Manim."

- name: "Accessing CLI command options"
  content: "Entering manim, or manim --help, will open the main help page.\n\nUsage: manim [OPTIONS] COMMAND [ARGS]...\n\n  Animation engine for explanatory math videos.\n\nOptions:\n  --version  Show version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  cfg      Manages Manim configuration files.\n  init     Sets up a new project in current working directory with default settings.\n\n           It copies files from templates directory and pastes them in the current working dir.\n  new      Create a new project or insert a new scene.\n  plugins  Manages Manim plugins.\n  render   Render SCENE(S) from the input FILE.\n\nSee 'manim <command>' to read about a specific subcommand.\n\nMade with <3 by Manim Community developers.\n\nEach of the subcommands has its own help page which can be accessed similarly:\n\nmanim render\nmanim render --help"
  description: "Instructions for accessing help and command options for Manim's CLI."